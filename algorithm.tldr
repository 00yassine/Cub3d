# Cub3d Program Algorithm

This document outlines the algorithmic flow of the Cub3d project.

## 1. Program Start (`main.c`)

1.  **Check Arguments**: The program starts in the `main` function. It first checks if it was launched with exactly one command-line argument (which should be the path to a `.cub` map file).

    - If not, it prints an error and exits.

2.  **Read Map File**:
    - It counts the number of lines in the provided map file to allocate the correct amount of memory.
    - It reads the entire file, line by line, and stores the content in a 2D character array (`char **map`).
    - If the file cannot be opened, it prints an error and exits.

## 2. Map Parsing (`src/parsing/parce_the_map.c`)

1.  **Parse Entry**: The `main` function calls `parce(map)` to process the map data.

2.  **Initialize Data Structure**: A `t_map` struct is allocated to hold the parsed information (texture paths, colors, etc.).

3.  **Validate Elements**:

    - The code checks that the map file contains exactly one of each of the required configuration lines:
      - `NO` (North texture)
      - `SO` (South texture)
      - `WE` (West texture)
      - `EA` (East texture)
      - `F` (Floor color)
      - `C` (Ceiling color)
    - If any of these are missing or duplicated, the program prints an error and exits.

4.  **Extract Information**: The program extracts the texture file paths and the RGB values for the floor and ceiling colors from the map content and stores them in the `t_map` struct.

5.  **Validate Map Layout**: The function `validate_map` is called to check if the map grid itself is valid (e.g., it's closed/surrounded by walls).

6.  **Return Parsed Data**: The `parce` function returns the fully populated `t_map` struct.

## 3. Graphics and Raycasting (`src/raycasting/start.c`)

1.  **Start Graphics Engine**: The `main` function calls `start(parsed_map)` with the data from the parsing step.

2.  **Initialize Graphics Data**:

    - A central `t_data` struct is initialized. This struct holds all the data needed for rendering, including:
      - MLX (graphics library) pointers.
      - Player position and angle.
      - The map grid.
      - Input states (e.g., which keys are pressed).
    - The player's starting position (`N`, `S`, `E`, or `W` on the map) is found and initialized.

3.  **Start the Main Loop**:
    - The program calls `mlx_loop(d.mlx_ptr)`. This function starts the game's main loop, which continuously listens for events and redraws the screen.

## 4. The Main Loop (Event-Driven)

The `mlx_loop` function manages the following:

1.  **Event Handling**:

    - **Key Press/Release**: It captures keyboard events to update the player's movement (up, down, left, right) and rotation.
    - **Window Close**: It handles the event when the user clicks the close button on the window.

2.  **Update Function (`update_loop`)**:
    - This function is called on every frame.
    - **Update Player Position**: It recalculates the player's `x` and `y` coordinates and viewing angle based on the current keyboard inputs (e.g., if the 'W' key is pressed, move the player forward). It includes collision detection to prevent the player from walking through walls.
    - **Render Frame**: It redraws the entire screen for the new frame:
      - **Raycasting**: For each vertical slice of the screen, it casts a ray from the player's position to find the nearest wall.
      - **Drawing**: Based on the distance to the wall, it draws a vertical line on the screen, scaling its height to create a 3D perspective. The correct texture (North, South, East, or West) is applied to the wall slice.
      - **Floor and Ceiling**: It draws the floor and ceiling with the colors specified in the map file.
      - **Display**: The newly rendered frame is pushed to the window.
